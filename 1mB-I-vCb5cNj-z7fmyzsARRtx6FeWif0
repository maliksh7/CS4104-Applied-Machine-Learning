{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Naive_Bayes_Classifier.ipynb","provenance":[],"authorship_tag":"ABX9TyMR/YO4oyzZKrlHTm6nIQbZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"FV0nT2Y-Pm9y","executionInfo":{"status":"ok","timestamp":1633961347879,"user_tz":-300,"elapsed":450,"user":{"displayName":"Muhammad Saad Hassan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvuA4137CdGcb_Z-DvFEihl5RCk5B9k9GJKdtw=s64","userId":"03713481096621099438"}}},"source":["# Imports\n","from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from collections import Counter\n","import numpy as np\n","from math import sqrt\n","from math import pi\n","from math import exp"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"JCgUOqRuS2gD","executionInfo":{"status":"ok","timestamp":1633961349501,"user_tz":-300,"elapsed":4,"user":{"displayName":"Muhammad Saad Hassan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvuA4137CdGcb_Z-DvFEihl5RCk5B9k9GJKdtw=s64","userId":"03713481096621099438"}}},"source":[" \n","\n","# Calculate the mean of a list of numbers\n","def mean(numbers):\n","  return sum(numbers)/float(len(numbers))\n","from math import sqrt\n","\n","# Calculate the standard deviation of a list of numbers\n","def stdev(numbers):\n","  avg = mean(numbers)\n","  variance = sum([(x-avg)**2 for x in numbers]) / float(len(numbers)-1)\n","  return sqrt(variance)\n"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7364ufpkQpkm"},"source":["Naive Bayes Classifier"]},{"cell_type":"markdown","metadata":{"id":"raEezqP_UIYc"},"source":["The Naive Bayes model is broken down into 5 parts:\n","\n","**Step 1: Separate By Class.**\n","\n","**Step 2: Summarize Dataset.**\n","\n","**Step 3: Summarize Data By Class.**\n","\n","**Step 4: Gaussian Probability Density Function.**\n","\n","**Step 5: Class Probabilities.**"]},{"cell_type":"code","metadata":{"id":"fBnRWvUsS2bB"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bICrsJk_Qm_W","executionInfo":{"status":"ok","timestamp":1633961421777,"user_tz":-300,"elapsed":445,"user":{"displayName":"Muhammad Saad Hassan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvuA4137CdGcb_Z-DvFEihl5RCk5B9k9GJKdtw=s64","userId":"03713481096621099438"}}},"source":["class NaivaBayes:\n","\n","  def __init__ (self, datasets):\n","    self.datasets = datasets\n","\n","  # Split the dataset by class values, returns a dictionary\n","  def separate_by_class(self, dataset):\n","    separated = dict()\n","    for i in range(len(dataset)):\n","      vector = dataset[i]\n","      class_value = vector[-1]\n","      if (class_value not in separated):\n","        separated[class_value] = list()\n","      separated[class_value].append(vector)\n","    return separated\n","\n","  # Calculate the mean, stdev and count for each column in a dataset\n","  def summarize_dataset(self, dataset):\n","    summaries = [(mean(column), stdev(column), len(column)) for column in zip(*dataset)]\n","    del(summaries[-1])\n","    return summaries\n","\n","  # Split dataset by class then calculate statistics for each row\n","  def summarize_by_class(self, dataset):\n","    separated = self.separate_by_class(dataset)\n","    summaries = dict()\n","    for class_value, rows in separated.items():\n","      summaries[class_value] = self.summarize_dataset(rows)\n","    return summaries\n","\n","  # Calculate the Gaussian probability distribution function for x\n","  def calculate_probability(self, x, mean, stdev):\n","    exponent = exp(-((x-mean)**2 / (2 * stdev**2 )))\n","    return (1 / (sqrt(2 * pi) * stdev)) * exponent\n","\n","  # Calculate the probabilities of predicting each class for a given row\n","  def calculate_class_probabilities(self, summaries, row):\n","    total_rows = sum([summaries[label][0][2] for label in summaries])\n","    probabilities = dict()\n","    for class_value, class_summaries in summaries.items():\n","      probabilities[class_value] = summaries[class_value][0][2]/float(total_rows)\n","      for i in range(len(class_summaries)):\n","        mean, stdev, count = class_summaries[i]\n","        probabilities[class_value] *= self.calculate_probability(row[i], mean, stdev)\n","    return probabilities"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_QWjaD_MSVRp","executionInfo":{"status":"ok","timestamp":1633962028848,"user_tz":-300,"elapsed":397,"user":{"displayName":"Muhammad Saad Hassan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvuA4137CdGcb_Z-DvFEihl5RCk5B9k9GJKdtw=s64","userId":"03713481096621099438"}},"outputId":"2a11581b-f345-4dd3-d005-982b0c94b29b"},"source":["if __name__ == \"__main__\":\n","  # cls is an instant of class NaivaBayes \n","  cls = NaivaBayes(iris)\n","\n","  # dataset\n","  \n","  iris = [[3.393533211,2.331273381,0],\n","\t[3.110073483,1.781539638,0],\n","\t[1.343808831,3.368360954,0],\n","\t[3.582294042,4.67917911,0],\n","\t[2.280362439,2.866990263,0],\n","\t[7.423436942,4.696522875,1],\n","\t[5.745051997,3.533989803,1],\n","\t[9.172168622,2.511101045,1],\n","\t[7.792783481,3.424088941,1],\n","\t[7.939820817,0.791637231,1]]\n","  \n","  \n","  # Split the dataset by class values, returns a dictionary\n","  separated = cls.separate_by_class(iris)\n","  print(\"[* ] - Split the dataset by class values, returns a dictionary:\\n\", separated)\n","  for label in separated:\n","    print(label)\n","    for row in separated[label]:\n","      print(row)\n","\n","  # Calculate the mean, stdev and count for each column in a dataset\n","  print(\"[* ] - Calculate the mean, stdev and count for each column in a dataset:\\n\")\n","  summary = cls.summarize_dataset(iris)\n","  print(summary)\n","  \n","  # Split dataset by class then calculate statistics for each row\n","  print(\"[* ] - Split dataset by class then calculate statistics for each row:\\n\")\n","  summarize = cls.summarize_by_class(iris)\n","  for label in summarize:\n","    print(label)\n","    for row in summarize[label]:\n","      print(row)\n","\n","  # Test Gaussian PDF\n","  print(\"[* ] - Test Gaussian PDF:\\n\")\n","  print(cls.calculate_probability(1.0, 1.0, 1.0))\n","  print(cls.calculate_probability(2.0, 1.0, 1.0))\n","  print(cls.calculate_probability(0.0, 1.0, 1.0))\n","\n","  # Calculate Class Probabilities\n","  summaries = cls.summarize_by_class(iris)\n","  probabilities = cls.calculate_class_probabilities(summaries, iris[0])\n","  print(\"[* ] - Class Probabilities:\\n\", probabilities)\n"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["[* ] - Split the dataset by class values, returns a dictionary:\n"," {0: [[3.393533211, 2.331273381, 0], [3.110073483, 1.781539638, 0], [1.343808831, 3.368360954, 0], [3.582294042, 4.67917911, 0], [2.280362439, 2.866990263, 0]], 1: [[7.423436942, 4.696522875, 1], [5.745051997, 3.533989803, 1], [9.172168622, 2.511101045, 1], [7.792783481, 3.424088941, 1], [7.939820817, 0.791637231, 1]]}\n","0\n","[3.393533211, 2.331273381, 0]\n","[3.110073483, 1.781539638, 0]\n","[1.343808831, 3.368360954, 0]\n","[3.582294042, 4.67917911, 0]\n","[2.280362439, 2.866990263, 0]\n","1\n","[7.423436942, 4.696522875, 1]\n","[5.745051997, 3.533989803, 1]\n","[9.172168622, 2.511101045, 1]\n","[7.792783481, 3.424088941, 1]\n","[7.939820817, 0.791637231, 1]\n","[* ] - Calculate the mean, stdev and count for each column in a dataset:\n","\n","[(5.178333386499999, 2.7665845055177263, 10), (2.9984683241, 1.218556343617447, 10)]\n","[* ] - Split dataset by class then calculate statistics for each row:\n","\n","0\n","(2.7420144012, 0.9265683289298018, 5)\n","(3.0054686692, 1.1073295894898725, 5)\n","1\n","(7.6146523718, 1.2344321550313704, 5)\n","(2.9914679790000003, 1.4541931384601618, 5)\n","[* ] - Test Gaussian PDF:\n","\n","0.3989422804014327\n","0.24197072451914337\n","0.24197072451914337\n","[* ] - Class Probabilities:\n"," {0: 0.05032427673372076, 1: 0.00011557718379945765}\n"]}]},{"cell_type":"code","metadata":{"id":"6_Qql4jLpt_P"},"source":[""],"execution_count":null,"outputs":[]}]}