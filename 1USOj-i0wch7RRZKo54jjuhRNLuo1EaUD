{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"KNN.ipynb","provenance":[],"authorship_tag":"ABX9TyOp/C/wby44RZ9xWH6wi39o"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"jnYuSE77AP0W"},"source":["Imports"]},{"cell_type":"code","metadata":{"id":"Bfq5oNVovKTh","executionInfo":{"status":"ok","timestamp":1633882210406,"user_tz":-300,"elapsed":395,"user":{"displayName":"Muhammad Saad Hassan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvuA4137CdGcb_Z-DvFEihl5RCk5B9k9GJKdtw=s64","userId":"03713481096621099438"}}},"source":["# Imports\n","from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from collections import Counter\n","import numpy as np\n"],"execution_count":36,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cEJV-AJgAaaB"},"source":["# Calculate the Euclidean distance between two vectors"]},{"cell_type":"code","metadata":{"id":"Fdo5RZ2x9pDR"},"source":["def euclidean_distance(row1, row2):\n","    return np.sqrt(np.sum((row1 - row2) ** 2))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EqVkOHBBAdlm"},"source":["**KNN from scratch**"]},{"cell_type":"code","metadata":{"id":"VhWsJSP19pAn","executionInfo":{"status":"ok","timestamp":1633882139330,"user_tz":-300,"elapsed":399,"user":{"displayName":"Muhammad Saad Hassan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhvuA4137CdGcb_Z-DvFEihl5RCk5B9k9GJKdtw=s64","userId":"03713481096621099438"}}},"source":["class KNN:\n","    def __init__(self, k=3):\n","        self.k = k\n","\n","    def fit(self, X, y):\n","        self.X_train = X\n","        self.y_train = y\n","\n","    def predict(self, X):\n","        y_pred = [self._predict(x) for x in X]\n","        return np.array(y_pred)\n","\n","    def _predict(self, x):\n","        # Compute distances between x and all examples in the training set\n","        distances = [euclidean_distance(x, x_train)\n","                     for x_train in self.X_train]\n","        # Sort by distance and return indices of the first k neighbors\n","        k_idx = np.argsort(distances)[: self.k]\n","        # Extract the labels of the k nearest neighbor training samples\n","        k_neighbor_labels = [self.y_train[i] for i in k_idx]\n","        # return the most common class label\n","        most_common = Counter(k_neighbor_labels).most_common(1)\n","        return most_common[0][0]"],"execution_count":34,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"59Kat0_wBJ6p"},"source":[""]},{"cell_type":"code","metadata":{"id":"2i0elupB9o6y"},"source":["\n","if __name__ == \"__main__\":\n","\n","\n","    def accuracy(y_true, y_pred):\n","        accuracy = np.sum(y_true == y_pred) / len(y_true)\n","        return accuracy\n","\n","    iris = datasets.load_iris()\n","    \n","    # print(\"Dataset Shape:\\n\", iris.shape)\n","\n","    print(\"Dataset:\\n\", iris)\n","\n","    X, y = iris.data, iris.target\n","\n","    X_train, X_test, y_train, y_test = train_test_split(\n","        X, y, test_size=0.2, random_state=10\n","    )\n","\n","    print(\"X_train: \",X_train.shape, \"X_test: \", X_test.shape)\n","    print(\"y_train: \",y_train.shape, \"y_test: \", y_test.shape)\n","\n","\n","    k = 3\n","    clf = KNN(k=k)\n","    clf.fit(X_train, y_train)\n","    predictions = clf.predict(X_test)\n","    print(\"KNN classification accuracy\", accuracy(y_test, predictions))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RZy8mU3WzKP6"},"source":[""],"execution_count":null,"outputs":[]}]}